
image:     file format elf32-lm32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000c0  00000534  00000534  00000588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  000005f4  000005f4  00000648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  00000608  00000608  0000065c  2**2
                  ALLOC
  4 .debug_abbrev 00000228  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066f  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000528  00000000  00000000  00000ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000026a  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000018c  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000077  00000000  00000000  00001962  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000023f  00000000  00000000  00001a19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00001c58  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 03 	calli 20 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_crt0>:
  20:	78 1c 00 00 	mvhi sp,0x0
  24:	3b 9c 0f fc 	ori sp,sp,0xffc
  28:	78 1a 00 00 	mvhi gp,0x0
  2c:	3b 5a 06 10 	ori gp,gp,0x610
  30:	78 01 00 00 	mvhi r1,0x0
  34:	38 21 06 08 	ori r1,r1,0x608
  38:	78 03 00 00 	mvhi r3,0x0
  3c:	38 63 06 0c 	ori r3,r3,0x60c

00000040 <.clearBSS>:
  40:	44 23 00 04 	be r1,r3,50 <.callMain>
  44:	58 20 00 00 	sw (r1+0),r0
  48:	34 21 00 04 	addi r1,r1,4
  4c:	e3 ff ff fd 	bi 40 <.clearBSS>

00000050 <.callMain>:
  50:	34 01 00 00 	mvi r1,0
  54:	34 02 00 00 	mvi r2,0
  58:	34 03 00 00 	mvi r3,0
  5c:	f8 00 00 83 	calli 268 <main>

00000060 <irq_enable>:
  60:	34 01 00 01 	mvi r1,1
  64:	d0 01 00 00 	wcsr IE,r1
  68:	c3 a0 00 00 	ret

0000006c <irq_mask>:
  6c:	34 01 00 0f 	mvi r1,15
  70:	d0 21 00 00 	wcsr IM,r1
  74:	c3 a0 00 00 	ret

00000078 <irq_disable>:
  78:	34 01 00 00 	mvi r1,0
  7c:	d0 01 00 00 	wcsr IE,r1
  80:	c3 a0 00 00 	ret

00000084 <jump>:
  84:	c0 20 00 00 	b r1

00000088 <halt>:
  88:	e0 00 00 00 	bi 88 <halt>

0000008c <enviar_bluetooth>:
	c=0;
	return;
}

enviar_bluetooth(char n, char s)
{
  8c:	37 9c ff fc 	addi sp,sp,-4
  90:	5b 9d 00 04 	sw (sp+4),ra
	
	switch(s){
  94:	34 03 00 65 	mvi r3,101
	c=0;
	return;
}

enviar_bluetooth(char n, char s)
{
  98:	20 42 00 ff 	andi r2,r2,0xff
  9c:	20 21 00 ff 	andi r1,r1,0xff
	
	switch(s){
  a0:	44 43 00 18 	be r2,r3,100 <enviar_bluetooth+0x74>
  a4:	34 03 00 73 	mvi r3,115
  a8:	44 43 00 0e 	be r2,r3,e0 <enviar_bluetooth+0x54>
  ac:	34 03 00 64 	mvi r3,100
  b0:	44 43 00 04 	be r2,r3,c0 <enviar_bluetooth+0x34>
	//uart0_putchar(n);
	//sleep(1000);
	//uart0_putchar(s);
	//sleep(1000);
	return;
}
  b4:	2b 9d 00 04 	lw ra,(sp+4)
  b8:	37 9c 00 04 	addi sp,sp,4
  bc:	c3 a0 00 00 	ret
		{
			uart0_putstr("\r\n ||Entrada de B||\r\n");
		} 
		break;
		case 'd':
		if(n == 'A')
  c0:	34 02 00 41 	mvi r2,65
  c4:	44 22 00 17 	be r1,r2,120 <enviar_bluetooth+0x94>
		{
			uart0_putstr("\r\n ||Desacanso de A||\r\n");
		}
		if(n == 'B')
  c8:	34 02 00 42 	mvi r2,66
  cc:	5c 22 ff fa 	bne r1,r2,b4 <enviar_bluetooth+0x28>
		{
			uart0_putstr("\r\n ||Desacanso de B||\r\n");
  d0:	78 01 00 00 	mvhi r1,0x0
  d4:	38 21 05 7c 	ori r1,r1,0x57c
  d8:	f8 00 00 c0 	calli 3d8 <uart0_putstr>
  dc:	e3 ff ff f6 	bi b4 <enviar_bluetooth+0x28>
		} 
		break;
		case 's': 
		if(n == 'A')
  e0:	34 02 00 41 	mvi r2,65
  e4:	44 22 00 13 	be r1,r2,130 <enviar_bluetooth+0xa4>
		{
			uart0_putstr("\r\n ||Salida de A||\r\n");
		}
		if(n == 'B')
  e8:	34 02 00 42 	mvi r2,66
  ec:	5c 22 ff f2 	bne r1,r2,b4 <enviar_bluetooth+0x28>
		{
			uart0_putstr("\r\n ||Salida de B||\r\n");
  f0:	78 01 00 00 	mvhi r1,0x0
  f4:	38 21 05 ac 	ori r1,r1,0x5ac
  f8:	f8 00 00 b8 	calli 3d8 <uart0_putstr>
  fc:	e3 ff ff ee 	bi b4 <enviar_bluetooth+0x28>
enviar_bluetooth(char n, char s)
{
	
	switch(s){
		case 'e':
		if(n == 'A')
 100:	34 02 00 41 	mvi r2,65
 104:	44 22 00 0f 	be r1,r2,140 <enviar_bluetooth+0xb4>
		{
			uart0_putstr("\r\n ||Entrada de A||\r\n");
		}
		if(n == 'B')
 108:	34 02 00 42 	mvi r2,66
 10c:	5c 22 ff ea 	bne r1,r2,b4 <enviar_bluetooth+0x28>
		{
			uart0_putstr("\r\n ||Entrada de B||\r\n");
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 05 4c 	ori r1,r1,0x54c
 118:	f8 00 00 b0 	calli 3d8 <uart0_putstr>
 11c:	e3 ff ff e6 	bi b4 <enviar_bluetooth+0x28>
		} 
		break;
		case 'd':
		if(n == 'A')
		{
			uart0_putstr("\r\n ||Desacanso de A||\r\n");
 120:	78 01 00 00 	mvhi r1,0x0
 124:	38 21 05 64 	ori r1,r1,0x564
 128:	f8 00 00 ac 	calli 3d8 <uart0_putstr>
 12c:	e3 ff ff e2 	bi b4 <enviar_bluetooth+0x28>
		} 
		break;
		case 's': 
		if(n == 'A')
		{
			uart0_putstr("\r\n ||Salida de A||\r\n");
 130:	78 01 00 00 	mvhi r1,0x0
 134:	38 21 05 94 	ori r1,r1,0x594
 138:	f8 00 00 a8 	calli 3d8 <uart0_putstr>
 13c:	e3 ff ff de 	bi b4 <enviar_bluetooth+0x28>
	
	switch(s){
		case 'e':
		if(n == 'A')
		{
			uart0_putstr("\r\n ||Entrada de A||\r\n");
 140:	78 01 00 00 	mvhi r1,0x0
 144:	38 21 05 34 	ori r1,r1,0x534
 148:	f8 00 00 a4 	calli 3d8 <uart0_putstr>
 14c:	e3 ff ff da 	bi b4 <enviar_bluetooth+0x28>

00000150 <lector_rfid>:
	return 0;
}


lector_rfid(char r)
{
 150:	37 9c ff e4 	addi sp,sp,-28
 154:	5b 8b 00 1c 	sw (sp+28),r11
 158:	5b 8c 00 18 	sw (sp+24),r12
 15c:	5b 8d 00 14 	sw (sp+20),r13
 160:	5b 8e 00 10 	sw (sp+16),r14
 164:	5b 8f 00 0c 	sw (sp+12),r15
 168:	5b 90 00 08 	sw (sp+8),r16
 16c:	5b 9d 00 04 	sw (sp+4),ra
 170:	20 30 00 ff 	andi r16,r1,0xff
	uint8_t flag2 = 1;
	char data_rfid = '0'; 
	int c = 0;
	writeGpio(5);
 174:	34 01 00 05 	mvi r1,5
 178:	f8 00 00 ea 	calli 520 <writeGpio>
	sleep(1000);
 17c:	34 01 03 e8 	mvi r1,1000
		{
			writeGpio(7);
			flag2 = 0;
			data_rfid = '0';
			enviar_bluetooth(data_rfid,r);
			uart1_putstr("page 0");
 180:	78 0f 00 00 	mvhi r15,0x0
{
	uint8_t flag2 = 1;
	char data_rfid = '0'; 
	int c = 0;
	writeGpio(5);
	sleep(1000);
 184:	f8 00 00 68 	calli 324 <sleep>

	while(flag2)
	{
		data_rfid = uart2_getchar();
	
		if(data_rfid == 'A' ) //Tarjeta de Javier
 188:	34 0d 00 41 	mvi r13,65
{
	uint8_t flag2 = 1;
	char data_rfid = '0'; 
	int c = 0;
	writeGpio(5);
	sleep(1000);
 18c:	34 0b 00 04 	mvi r11,4
			uart1_putchar(0xff);
			uart1_putchar(0xff);
			sleep(100);

		}
		if(data_rfid == 'B') //Tarjeta de Camilo
 190:	34 0e 00 42 	mvi r14,66
		{
			writeGpio(7);
			flag2 = 0;
			data_rfid = '0';
			enviar_bluetooth(data_rfid,r);
			uart1_putstr("page 0");
 194:	39 ef 05 c4 	ori r15,r15,0x5c4
	writeGpio(5);
	sleep(1000);

	while(flag2)
	{
		data_rfid = uart2_getchar();
 198:	f8 00 00 be 	calli 490 <uart2_getchar>
	
		if(data_rfid == 'A' ) //Tarjeta de Javier
 19c:	44 2d 00 0a 	be r1,r13,1c4 <lector_rfid+0x74>
			uart1_putchar(0xff);
			uart1_putchar(0xff);
			sleep(100);

		}
		if(data_rfid == 'B') //Tarjeta de Camilo
 1a0:	34 0c 00 01 	mvi r12,1
 1a4:	44 2e 00 2f 	be r1,r14,260 <lector_rfid+0x110>
			enviar_bluetooth(data_rfid,r);
			uart1_putstr("page 0");
			uart1_putchar(0xff);
			uart1_putchar(0xff);
			uart1_putchar(0xff);
			sleep(100);
 1a8:	35 6b ff ff 	addi r11,r11,-1
			sleep(100);
			
		}
		else
		{
			sleep(1000);
 1ac:	34 01 03 e8 	mvi r1,1000
			uart1_putchar(0xff);
			uart1_putchar(0xff);
			sleep(100);

		}
		if(c==3)
 1b0:	45 60 00 18 	be r11,r0,210 <lector_rfid+0xc0>
			sleep(100);
			
		}
		else
		{
			sleep(1000);
 1b4:	f8 00 00 5c 	calli 324 <sleep>
	char data_rfid = '0'; 
	int c = 0;
	writeGpio(5);
	sleep(1000);

	while(flag2)
 1b8:	45 80 00 21 	be r12,r0,23c <lector_rfid+0xec>
	{
		data_rfid = uart2_getchar();
 1bc:	f8 00 00 b5 	calli 490 <uart2_getchar>
	
		if(data_rfid == 'A' ) //Tarjeta de Javier
 1c0:	5c 2d ff f8 	bne r1,r13,1a0 <lector_rfid+0x50>
		{
			writeGpio(6);
 1c4:	34 01 00 06 	mvi r1,6
			sleep(100);

		}
		if(data_rfid == 'B') //Tarjeta de Camilo
		{
			writeGpio(7);
 1c8:	f8 00 00 d6 	calli 520 <writeGpio>
			flag2 = 0;
			data_rfid = '0';
			enviar_bluetooth(data_rfid,r);
 1cc:	ba 00 10 00 	mv r2,r16
 1d0:	34 01 00 30 	mvi r1,48
 1d4:	fb ff ff ae 	calli 8c <enviar_bluetooth>
			uart1_putstr("page 0");
 1d8:	b9 e0 08 00 	mv r1,r15
 1dc:	f8 00 00 9f 	calli 458 <uart1_putstr>
			uart1_putchar(0xff);
 1e0:	34 01 00 ff 	mvi r1,255
 1e4:	f8 00 00 94 	calli 434 <uart1_putchar>
			uart1_putchar(0xff);
 1e8:	34 01 00 ff 	mvi r1,255
 1ec:	f8 00 00 92 	calli 434 <uart1_putchar>
			uart1_putchar(0xff);
 1f0:	34 01 00 ff 	mvi r1,255
 1f4:	f8 00 00 90 	calli 434 <uart1_putchar>
			sleep(100);
 1f8:	34 01 00 64 	mvi r1,100
 1fc:	f8 00 00 4a 	calli 324 <sleep>
 200:	35 6b ff ff 	addi r11,r11,-1

		}
		if(data_rfid == 'B') //Tarjeta de Camilo
		{
			writeGpio(7);
			flag2 = 0;
 204:	34 0c 00 00 	mvi r12,0
			sleep(100);
			
		}
		else
		{
			sleep(1000);
 208:	34 01 03 e8 	mvi r1,1000
			uart1_putchar(0xff);
			uart1_putchar(0xff);
			sleep(100);

		}
		if(c==3)
 20c:	5d 60 ff ea 	bne r11,r0,1b4 <lector_rfid+0x64>
		{
			flag2 = 0;
			data_rfid = '0';			
			uart1_putstr("page 0");
 210:	78 01 00 00 	mvhi r1,0x0
 214:	38 21 05 c4 	ori r1,r1,0x5c4
 218:	f8 00 00 90 	calli 458 <uart1_putstr>
			uart1_putchar(0xff);
 21c:	34 01 00 ff 	mvi r1,255
 220:	f8 00 00 85 	calli 434 <uart1_putchar>
			uart1_putchar(0xff);
 224:	34 01 00 ff 	mvi r1,255
 228:	f8 00 00 83 	calli 434 <uart1_putchar>
			uart1_putchar(0xff);
 22c:	34 01 00 ff 	mvi r1,255
 230:	f8 00 00 81 	calli 434 <uart1_putchar>
			sleep(100);
 234:	34 01 00 64 	mvi r1,100
 238:	f8 00 00 3b 	calli 324 <sleep>
			c++;
		}
	}
	c=0;
	return;
}
 23c:	2b 9d 00 04 	lw ra,(sp+4)
 240:	2b 8b 00 1c 	lw r11,(sp+28)
 244:	2b 8c 00 18 	lw r12,(sp+24)
 248:	2b 8d 00 14 	lw r13,(sp+20)
 24c:	2b 8e 00 10 	lw r14,(sp+16)
 250:	2b 8f 00 0c 	lw r15,(sp+12)
 254:	2b 90 00 08 	lw r16,(sp+8)
 258:	37 9c 00 1c 	addi sp,sp,28
 25c:	c3 a0 00 00 	ret
			sleep(100);

		}
		if(data_rfid == 'B') //Tarjeta de Camilo
		{
			writeGpio(7);
 260:	34 01 00 07 	mvi r1,7
 264:	e3 ff ff d9 	bi 1c8 <lector_rfid+0x78>

00000268 <main>:


void lector_rfid(char r);
void enviar_bluetooth(char n, char s);

int main(){
 268:	37 9c ff ec 	addi sp,sp,-20
 26c:	5b 8b 00 14 	sw (sp+20),r11
 270:	5b 8c 00 10 	sw (sp+16),r12
 274:	5b 8d 00 0c 	sw (sp+12),r13
 278:	5b 8e 00 08 	sw (sp+8),r14
 27c:	5b 9d 00 04 	sw (sp+4),ra
 280:	78 0c 00 00 	mvhi r12,0x0
 284:	39 8c 05 cc 	ori r12,r12,0x5cc
		sleep(1000);

		data_lcd = uart1_getchar();
		sleep(100);

		switch(data_lcd){
 288:	34 0d 00 65 	mvi r13,101
 28c:	34 0e 00 73 	mvi r14,115
	uint8_t flag=1;
	char data_lcd ='0';
    
	while(flag){  
 
		writeGpio(1); 
 290:	34 01 00 01 	mvi r1,1
 294:	f8 00 00 a3 	calli 520 <writeGpio>
		sleep(1000);
 298:	34 01 03 e8 	mvi r1,1000
 29c:	f8 00 00 22 	calli 324 <sleep>
		uart0_putstr("\r\n ||Control Acceso Empleados||\r\n");
 2a0:	b9 80 08 00 	mv r1,r12
 2a4:	f8 00 00 4d 	calli 3d8 <uart0_putstr>
		sleep(1000);
 2a8:	34 01 03 e8 	mvi r1,1000
 2ac:	f8 00 00 1e 	calli 324 <sleep>

		data_lcd = uart1_getchar();
 2b0:	f8 00 00 58 	calli 410 <uart1_getchar>
 2b4:	b8 20 58 00 	mv r11,r1
		sleep(100);
 2b8:	34 01 00 64 	mvi r1,100
 2bc:	f8 00 00 1a 	calli 324 <sleep>

		switch(data_lcd){
 2c0:	45 6d 00 12 	be r11,r13,308 <main+0xa0>
 2c4:	45 6e 00 0a 	be r11,r14,2ec <main+0x84>
 2c8:	34 01 00 64 	mvi r1,100
 2cc:	5d 61 ff f1 	bne r11,r1,290 <main+0x28>
				sleep(1000);
				lector_rfid('e'); //Registrar entrada

			break;
			case 'd':
				writeGpio(3); 
 2d0:	34 01 00 03 	mvi r1,3
 2d4:	f8 00 00 93 	calli 520 <writeGpio>
				sleep(1000);
 2d8:	34 01 03 e8 	mvi r1,1000
 2dc:	f8 00 00 12 	calli 324 <sleep>
				lector_rfid('d'); //Registrar descanso
 2e0:	34 01 00 64 	mvi r1,100
 2e4:	fb ff ff 9b 	calli 150 <lector_rfid>

			break;
 2e8:	e3 ff ff ea 	bi 290 <main+0x28>
			case 's':
		           	writeGpio(4); 
 2ec:	34 01 00 04 	mvi r1,4
 2f0:	f8 00 00 8c 	calli 520 <writeGpio>
				sleep(1000);
 2f4:	34 01 03 e8 	mvi r1,1000
 2f8:	f8 00 00 0b 	calli 324 <sleep>
				lector_rfid('s'); //Registrar salida
 2fc:	34 01 00 73 	mvi r1,115
 300:	fb ff ff 94 	calli 150 <lector_rfid>
 304:	e3 ff ff e3 	bi 290 <main+0x28>
		sleep(100);

		switch(data_lcd){

			case 'e':
				writeGpio(2); 
 308:	34 01 00 02 	mvi r1,2
 30c:	f8 00 00 85 	calli 520 <writeGpio>
				sleep(1000);
 310:	34 01 03 e8 	mvi r1,1000
 314:	f8 00 00 04 	calli 324 <sleep>
				lector_rfid('e'); //Registrar entrada
 318:	34 01 00 65 	mvi r1,101
 31c:	fb ff ff 8d 	calli 150 <lector_rfid>

			break;
 320:	e3 ff ff dc 	bi 290 <main+0x28>

00000324 <sleep>:
void sleep(int msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 324:	78 04 00 00 	mvhi r4,0x0
 328:	38 84 05 f0 	ori r4,r4,0x5f0
 32c:	28 83 00 00 	lw r3,(r4+0)
 330:	78 02 00 00 	mvhi r2,0x0
 334:	38 42 06 00 	ori r2,r2,0x600
 338:	28 42 00 00 	lw r2,(r2+0)
 33c:	88 23 08 00 	mul r1,r1,r3
 340:	58 41 00 10 	sw (r2+16),r1
	//timer0->compare1 = (FCPU/1000000)*msec;
	timer0->counter1 = 0;
 344:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN | TIMER_IRQEN;
 348:	34 01 00 0a 	mvi r1,10
 34c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 350:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 354:	20 21 00 01 	andi r1,r1,0x1
 358:	44 20 ff fe 	be r1,r0,350 <sleep+0x2c>
}
 35c:	c3 a0 00 00 	ret

00000360 <tic_init>:

void tic_init()
{
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000);
 360:	78 01 00 00 	mvhi r1,0x0
 364:	78 03 00 00 	mvhi r3,0x0
 368:	38 21 06 00 	ori r1,r1,0x600
 36c:	38 63 05 f0 	ori r3,r3,0x5f0
 370:	28 21 00 00 	lw r1,(r1+0)
 374:	28 62 00 00 	lw r2,(r3+0)
 378:	58 22 00 04 	sw (r1+4),r2
	timer0->counter0 = 0;
 37c:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 380:	34 02 00 0e 	mvi r2,14
 384:	58 22 00 00 	sw (r1+0),r2
}
 388:	c3 a0 00 00 	ret

0000038c <uart0_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 38c:	c3 a0 00 00 	ret

00000390 <uart0_getchar>:

char uart0_getchar()
{   
 390:	78 01 00 00 	mvhi r1,0x0
 394:	38 21 05 f4 	ori r1,r1,0x5f4
 398:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 39c:	28 41 00 00 	lw r1,(r2+0)
 3a0:	20 21 00 01 	andi r1,r1,0x1
 3a4:	44 20 ff fe 	be r1,r0,39c <uart0_getchar+0xc>
	return uart0->rxtx;
 3a8:	28 41 00 04 	lw r1,(r2+4)
}
 3ac:	20 21 00 ff 	andi r1,r1,0xff
 3b0:	c3 a0 00 00 	ret

000003b4 <uart0_putchar>:

void uart0_putchar(char c)
{
 3b4:	78 02 00 00 	mvhi r2,0x0
 3b8:	38 42 05 f4 	ori r2,r2,0x5f4
 3bc:	28 43 00 00 	lw r3,(r2+0)
 3c0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 3c4:	28 62 00 00 	lw r2,(r3+0)
 3c8:	20 42 00 10 	andi r2,r2,0x10
 3cc:	5c 40 ff fe 	bne r2,r0,3c4 <uart0_putchar+0x10>
	uart0->rxtx = c;
 3d0:	58 61 00 04 	sw (r3+4),r1
}
 3d4:	c3 a0 00 00 	ret

000003d8 <uart0_putstr>:

void uart0_putstr(char *str)
{
	char *c = str;
	while(*c) {
 3d8:	40 24 00 00 	lbu r4,(r1+0)
 3dc:	44 80 00 0b 	be r4,r0,408 <uart0_putstr+0x30>
 3e0:	78 02 00 00 	mvhi r2,0x0
 3e4:	38 42 05 f4 	ori r2,r2,0x5f4
 3e8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart0_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 3ec:	28 62 00 00 	lw r2,(r3+0)
 3f0:	20 42 00 10 	andi r2,r2,0x10
 3f4:	5c 40 ff fe 	bne r2,r0,3ec <uart0_putstr+0x14>
	uart0->rxtx = c;
 3f8:	58 64 00 04 	sw (r3+4),r4
void uart0_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart0_putchar(*c);
		c++;
 3fc:	34 21 00 01 	addi r1,r1,1
}

void uart0_putstr(char *str)
{
	char *c = str;
	while(*c) {
 400:	40 24 00 00 	lbu r4,(r1+0)
 404:	5c 82 ff fa 	bne r4,r2,3ec <uart0_putstr+0x14>
 408:	c3 a0 00 00 	ret

0000040c <uart1_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 40c:	c3 a0 00 00 	ret

00000410 <uart1_getchar>:

char uart1_getchar()
{   
 410:	78 01 00 00 	mvhi r1,0x0
 414:	38 21 05 f8 	ori r1,r1,0x5f8
 418:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 41c:	28 41 00 00 	lw r1,(r2+0)
 420:	20 21 00 01 	andi r1,r1,0x1
 424:	44 20 ff fe 	be r1,r0,41c <uart1_getchar+0xc>
	return uart1->rxtx;
 428:	28 41 00 04 	lw r1,(r2+4)
}
 42c:	20 21 00 ff 	andi r1,r1,0xff
 430:	c3 a0 00 00 	ret

00000434 <uart1_putchar>:

void uart1_putchar(char c)
{
 434:	78 02 00 00 	mvhi r2,0x0
 438:	38 42 05 f8 	ori r2,r2,0x5f8
 43c:	28 43 00 00 	lw r3,(r2+0)
 440:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 444:	28 62 00 00 	lw r2,(r3+0)
 448:	20 42 00 10 	andi r2,r2,0x10
 44c:	5c 40 ff fe 	bne r2,r0,444 <uart1_putchar+0x10>
	uart1->rxtx = c;
 450:	58 61 00 04 	sw (r3+4),r1
}
 454:	c3 a0 00 00 	ret

00000458 <uart1_putstr>:

void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
 458:	40 24 00 00 	lbu r4,(r1+0)
 45c:	44 80 00 0b 	be r4,r0,488 <uart1_putstr+0x30>
 460:	78 02 00 00 	mvhi r2,0x0
 464:	38 42 05 f8 	ori r2,r2,0x5f8
 468:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart1_putchar(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 46c:	28 62 00 00 	lw r2,(r3+0)
 470:	20 42 00 10 	andi r2,r2,0x10
 474:	5c 40 ff fe 	bne r2,r0,46c <uart1_putstr+0x14>
	uart1->rxtx = c;
 478:	58 64 00 04 	sw (r3+4),r4
void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart1_putchar(*c);
		c++;
 47c:	34 21 00 01 	addi r1,r1,1
}

void uart1_putstr(char *str)
{
	char *c = str;
	while(*c) {
 480:	40 24 00 00 	lbu r4,(r1+0)
 484:	5c 82 ff fa 	bne r4,r2,46c <uart1_putstr+0x14>
 488:	c3 a0 00 00 	ret

0000048c <uart2_init>:
	//uart2->lcr = 0x03;  // Line Control Register:    8N1
	//uart2->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart2->div = (FCPU/(57600*16));
}
 48c:	c3 a0 00 00 	ret

00000490 <uart2_getchar>:

char uart2_getchar()
{   
 490:	78 01 00 00 	mvhi r1,0x0
 494:	38 21 05 fc 	ori r1,r1,0x5fc
 498:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart2->ucr & UART_DR)) ;
 49c:	28 41 00 00 	lw r1,(r2+0)
 4a0:	20 21 00 01 	andi r1,r1,0x1
 4a4:	44 20 ff fe 	be r1,r0,49c <uart2_getchar+0xc>
	return uart2->rxtx;
 4a8:	28 41 00 04 	lw r1,(r2+4)
}
 4ac:	20 21 00 ff 	andi r1,r1,0xff
 4b0:	c3 a0 00 00 	ret

000004b4 <uart2_putchar>:

void uart2_putchar(char c)
{
 4b4:	78 02 00 00 	mvhi r2,0x0
 4b8:	38 42 05 fc 	ori r2,r2,0x5fc
 4bc:	28 43 00 00 	lw r3,(r2+0)
 4c0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart2->ucr & UART_BUSY) ;
 4c4:	28 62 00 00 	lw r2,(r3+0)
 4c8:	20 42 00 10 	andi r2,r2,0x10
 4cc:	5c 40 ff fe 	bne r2,r0,4c4 <uart2_putchar+0x10>
	uart2->rxtx = c;
 4d0:	58 61 00 04 	sw (r3+4),r1
}
 4d4:	c3 a0 00 00 	ret

000004d8 <uart2_putstr>:

void uart2_putstr(char *str)
{
	char *c = str;
	while(*c) {
 4d8:	40 24 00 00 	lbu r4,(r1+0)
 4dc:	44 80 00 0b 	be r4,r0,508 <uart2_putstr+0x30>
 4e0:	78 02 00 00 	mvhi r2,0x0
 4e4:	38 42 05 fc 	ori r2,r2,0x5fc
 4e8:	28 43 00 00 	lw r3,(r2+0)
	return uart2->rxtx;
}

void uart2_putchar(char c)
{
	while (uart2->ucr & UART_BUSY) ;
 4ec:	28 62 00 00 	lw r2,(r3+0)
 4f0:	20 42 00 10 	andi r2,r2,0x10
 4f4:	5c 40 ff fe 	bne r2,r0,4ec <uart2_putstr+0x14>
	uart2->rxtx = c;
 4f8:	58 64 00 04 	sw (r3+4),r4
void uart2_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart2_putchar(*c);
		c++;
 4fc:	34 21 00 01 	addi r1,r1,1
}

void uart2_putstr(char *str)
{
	char *c = str;
	while(*c) {
 500:	40 24 00 00 	lbu r4,(r1+0)
 504:	5c 82 ff fa 	bne r4,r2,4ec <uart2_putstr+0x14>
 508:	c3 a0 00 00 	ret

0000050c <readGpio>:

/***************************************************************************
  GPIO Functions*/
uint32_t readGpio()
{
return gpio0->in;
 50c:	78 01 00 00 	mvhi r1,0x0
 510:	38 21 06 04 	ori r1,r1,0x604
 514:	28 21 00 00 	lw r1,(r1+0)
 518:	28 21 00 10 	lw r1,(r1+16)
}
 51c:	c3 a0 00 00 	ret

00000520 <writeGpio>:

void writeGpio(int data)
{
gpio0->out = data;
 520:	78 02 00 00 	mvhi r2,0x0
 524:	38 42 06 04 	ori r2,r2,0x604
 528:	28 42 00 00 	lw r2,(r2+0)
 52c:	58 41 00 14 	sw (r2+20),r1
}
 530:	c3 a0 00 00 	ret
